extends ./includes/template_page.pug

block content
    div.d-flex.justify-content-center
        div.home-content.mt-5
            div.col-12
                div.row
                    div.col-12.col-md-6.align-self-center
                        img.w-100.image-home(src="scheme.jpg" alt="Attacks scheme")

                    div.col-12.col-md-6.align-self-center
                        h1.text-capitalize.text-left Cos'è un attacco XSS?
                        p.text-justify.
                            Un attacco XSS è un vettore di attacco basato sull'iniezione di codice javascript che permetta all'attaccante di eseguire codice malevolo,
                            questo tipo di vettore d'attacco risulta molto comune nel World Wide Web, tanto che ne sono state colpite aziende del calibro di:
                        ul
                            li Yahoo
                            li MySpace
                            li Hotmail

                        p.text-justify Vi sono vari tipi di varianti come da immagine a lato, il fattore che li accomuna è che il codice iniettato deve essere interpretato come benevolo.

            div.col-12
                nav.mt-5
                    div.nav.nav-tabs(id="nav-tab" role="tablist")
                        button.nav-link.active(id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#analysis-tool" type="button" role="tab" aria-controls="analysis-tool" aria-selected="true") Source Code Analysis Tool
                        button.nav-link(id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#vulnerability" type="button" role="tab" aria-controls="vulnerability" aria-selected="false") Cos'è una vulnerabilità?
                        button.nav-link(id="nav-contact-tab" data-bs-toggle="tab" data-bs-target="#static-analysis" type="button" role="tab" aria-controls="static-analysis" aria-selected="false") Analisi Statica

                div.tab-content(id="nav-tabContent")
                    div.tab-pane.fade.show.active(id="analysis-tool" role="tabpanel" aria-labelledby="nav-home-tab" tabindex="0")
                        p.tab-text.
                            Strumenti di questo tipo fanno parte di una categoria chiamata "#[i Static Application Security Testing]",
                            sono programmi in grado di analizzare il codice sorgente o versioni compilate di codice con lo scopo di ricercare falle e vulnerabilità.
                            Uno dei loro principali punti a favore è che #[mark possono essere implementati per l'analisi di una grande quantità di software], inoltre
                            #[mark sono molto utili nella ricerca di vulnerabilità "ben definite"] che quindi possono essere automaticamente trovate da questi software con un'alta affidabilità.
                            L'output generato da questo tipo di software è molto utile per lo sviluppatore in quanto evidenzia le fonti precise all'interno del codice,
                            il numero di linea o intere sezioni.

                    div.tab-pane.fade(id="vulnerability" role="tabpanel" aria-labelledby="nav-profile-tab" tabindex="0")
                        p.tab-text.
                            In accordo con il #[b "Common Vulnerabilities and Exposures (CVE)"] una vulnerabilità è per definizione
                            "#[i Un errore nel software che può essere direttamente utilizzato da un hacker per accedere ad un sistema oppure ad una rete]",
                             il CVE considera la vulnerabilità uno stato in un sistema informatico che consente ad un utente malintenzionato: di eseguire
                            comandi riservati ad altri tipi di utente o ad altri utenti, accedere a dati privilegiati, mascherarsi come un'altra entità e/o influenzare il corretto comportamento del sistema.
                            Espandendo la nozione di vulnerabilità proposta dalla CVE, possiamo affermare che una vulnerabilità è un qualsiasi aspetto del software che può essere sfruttato per usare in modo
                            meschino o sleale a proprio vantaggio la riservatezza, l'integrità e/o la disponibilità del sistema. In molti casi le vulnerabilità derivano da errori nella programmazione e/o utilizzo
                            di funzioni interpretate erroneamente. Le vulnerabilità sono difetti, ma non tutti i difetti sono vulnerabilità.

                    div.tab-pane.fade(id="static-analysis" role="tabpanel" aria-labelledby="nav-contact-tab" tabindex="0")
                        p.tab-text.
                            L'analisi statica del codice sorgente è emersa recentemente come mezzo standard per analizzare un programma con lo scopo di trovare potenziali errori relativi alla sicurezza
                            in fase di compilazione. L'analisi statica, processo anche chiamato Static Application Security Testing (SAST) è quindi “#[i il processo di valutazione di un sistema o di un componente in base alla sua forma, struttura, contenuto o documentazione.]"
                            Lo scopo principale dell'analisi del codice di un'applicazione è la scoperta di potenziali errori. È "#[i statico]" perché analizza le applicazioni senza eseguirle,
                            il che significa che #[mark un'applicazione può essere testata in modo esauriente senza creare un ambiente di runtime o mettere a rischio i sistemi di produzione.]
                            Cio' rende l'analisi del codice statico molto adatta per testare le applicazioni in ricerca dei difetti di sicurezza.
